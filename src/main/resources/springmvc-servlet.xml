<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       ">


	<!-- 启用spring mvc 注解 首先说<context:annotation-config> 标签吧，该标签的作用是 向Spring 
		容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、 
		PersistenceAnnotationBeanPostProcessor 以及 RequiredAnnotationBeanPostProcessor 
		这 4 个BeanPostProcessor。 注册这4个BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解。 -->
	<!-- 使用context:component-scan后，可不再用这个 
	<context:annotation-config /> -->


	<!-- 设置使用注解的类所在的jar包 -->
	<!-- 注：如果base-package=cn.javass 则注解事务不起作用 -->
	  <context:component-scan base-package="mybatistest.controller"></context:component-scan>  
	<!-- 作用：是对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用。 解决了bean的注入和使用 -->
	<!-- 此处只应该加载表现层组件，如果此处还加载dao层或service层的bean会将之前容器加载的替换掉，而且此处不会进行AOP织入，所以会造成AOP失效问题（如事务不起作用） -->

<!-- 	<mvc:annotation-driven /> -->
	<!-- 作用：会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 
		说明：新版本（3.1）应该是另外两个RequestMappingHandlerMapping和RequestMappingHandlerAdapter 
		两个bean,是spring MVC为@Controllers分发请求所必须的。 并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持， 
		读写XML的支持（JAXB），读写JSON的支持（Jackson）。 -->

	<!-- 协商 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- true，开启扩展名支持，false关闭支持 ? -->
		<property name="favorPathExtension" value="true" />
		<!-- 用于开启 /userinfo/123?format=json的支持 ? -->
		<property name="favorParameter" value="true" />


		<!-- 在没有扩展名时即: "/user/1" 时的默认展现形式 -->
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
				<!-- 告诉视图解析器，返回的类型为json格式 application/json -->
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView"></property>
					<property name="prefix" value="/jsp/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>

		<property name="defaultViews">
			<list>
				<!-- ModelAndView里的数据变成JSON -->
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" >
					<property name="extractValueFromSingleKeyModel" value="false" />
					<property name="objectMapper" >
					  <bean class="org.codehaus.jackson.map.ObjectMapper" >
					  <property name="serializationInclusion">
					   <value type="org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion">NON_NULL</value>
					  </property>
					  <property name="dateFormat">
					  <bean class="java.text.SimpleDateFormat">
					    <constructor-arg>
					    <value>yyyy-MM-dd HH:mm:ss</value>
					    </constructor-arg>
					  </bean>
					  </property>
					  </bean>
					  </property>
					</bean>
				<!-- XML -->
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller">
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller" />
					</property>
				</bean>
			</list>
		</property>
	</bean>



	<!-- 拦截器 -->

	<mvc:interceptors>
		<!-- 多个拦截器,顺序执行 interceptors下面的bean是根拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="mybatistest.controller.CommonInterceptor"></bean>
			<!-- 定义本地化变更拦截器 -->
			<!-- 如果不配置或/**,将拦截所有的Controller -->
			<!-- <mvc:mapping path="/**" /> <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"> 
				</bean> -->
		</mvc:interceptor>

	</mvc:interceptors>

	<!-- 总错误处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">

		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">jsp/errors/error</prop>
				<prop key="java.lang.Throwable">jsp/errors/err</prop>
			</props>
		</property>

		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
		<property name="warnLogCategory" value="WARN"></property>

		<property name="defaultErrorView">
			<value>/error/error</value>
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
	</bean>

	<!--资源文件绑定器 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:resources/i18n/messages" />
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="cacheSeconds" value="3600"/> 
	</bean>


	<!-- class="org.springframework.web.servlet.i18n.SessionLocaleResolver" 
		<property name="defaultLocale" value="zh" /> > -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
	</bean>






</beans>