<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       ">

	<!-- 启用spring mvc 注解 -->
	<context:annotation-config />

	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="mybatistest"></context:component-scan>

	<!-- Spring3.1前的方式 完成请求和注解POJO的映射 -->
	<!-- 
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    -->

<!--Spring3.1开始的注解 HandlerMapping -->   
<bean    
class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>   
<!--Spring3.1开始的注解 HandlerAdapter -->   
<bean   
class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>  

    <!-- 视图解析器策略 和 视图解析器 -->   
    <!-- 对JSTL提供良好的支持 -->   
	<!-- 视图解释类 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
        <!-- 默认的viewClass,可以不用配置  --> 
		<!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>
	
    <!-- 处理JSON数据转换的 -->   
    <bean id="mappingJacksonHttpMessageConverter"    
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">    
     <!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->    
        <property name="supportedMediaTypes">     
            <list>     
                  <value>text/html;charset=UTF-8</value>     
            </list>     
        </property>     
    </bean>     
	
	
	<!-- 拦截器 -->
	<!-- <mvc:interceptors> <bean class="com.core.mvc.MyInteceptor" /> </mvc:interceptors> -->
<!-- 拦截器 -->  
    <mvc:interceptors>  
        <!-- 多个拦截器,顺序执行 -->  
        <mvc:interceptor>  
           <mvc:mapping path="/*" /><!-- 如果不配置或/*,将拦截所有的Controller -->  
           <bean class="mybatistest.controller.CommonInterceptor"></bean>  
        </mvc:interceptor>  
    </mvc:interceptors>  
    <!-- 处理在类级别上的@RequestMapping注解-->   
    <bean   
        class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" >   
        <property name="interceptors">   
           <!-- 多个拦截器,顺序执行 -->   
           <list>   
              <ref bean="commonInterceptor"/>   
           </list>   
        </property>   
    </bean>   
    
    <!--    
             如果不定义mappingURL，则默认拦截所有对Controller的请求 ;    
             可以使用正则表达式对url进行匹配，从而更细粒度的进行拦截(.*/entryOrJsonController\.do\?action=reg.*);   
    -->   
    <bean id="commonInterceptor" class="mybatistest.controller.CommonInterceptor">   
<!--        <property name="mappingURL" value=".*/entryOrJsonController\.do\?action=reg.*"/>  -->   
    </bean>   
    
    

	<!-- 对静态资源文件的访问 方案一 激活Tomcat的defaultServlet来处理静态文件 要写在DispatcherServlet的前面， 
		让 defaultServlet先拦截请求，这样请求就不会进入Spring了，我想性能是最好的吧。 Tomcat, Jetty, JBoss, and 
		GlassFish 自带的默认Servlet的名字 "default" Google App Engine 自带的 默认Servlet的名字 "_ah_default" 
		Resin 自带的 默认Servlet的名字 "resin-file" WebLogic 自带的 默认Servlet的名字 "FileServlet" 
		WebSphere 自带的 默认Servlet的名字 "SimpleFileServlet" <servlet-mapping> <servlet-name>default</servlet-name> 
		<url-pattern>*.jpg</url-pattern> </servlet-mapping> -->
	<!-- 对静态资源文件的访问 方案二 -->
	<mvc:default-servlet-handler />


	<!-- 对静态资源文件的访问 方案三 -->
	<mvc:resources mapping="/images/**" location="/images/"
		cache-period="31556926" />
	<mvc:resources mapping="/js/**" location="/js/"
		cache-period="31556926" />
	<mvc:resources mapping="/css/**" location="/css/"
		cache-period="31556926" />


    <!--    
              将指定路径的请求直接转到对应的view上，而不需要特定的controller来处理请求 .   
              注意：此处的映射路径是/hello,请求时http://localhost:8080/SpringMVC/hello   
              不能在hello.xxx,而不使用此种方式的映射可以加的,因为web.xml配置的是‘/’               
     -->   
    <mvc:view-controller path="/hello" view-name="hello" />   


	<!-- 总错误处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/error/error</value>
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
	</bean>


</beans>